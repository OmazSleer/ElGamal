program ElGamal;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils,
  Math;

type
  TArrayInt = array of integer;

  TByteArray = array of Byte;

var
  p, i, g, counter, x, y, counter_of_choices, a, b: Integer;
  prime, bol: Boolean;
  Array_of_primes, Array_of_choices: TArrayInt;
  Byte_Array: TByteArray;
  s: string;

procedure Root(var p, counter_of_choices_test: integer; var Aray, Aray_of_choices: TArrayInt);
var
  k, t, j: integer;
  bole: boolean;
begin
  t := 0;
  counter_of_choices_test := 0;
  for k := 1 to counter do
  begin
    for j := 2 to p - 1 do
    begin
      if (Round((Power(j, (p - 1) / Aray[k - 1]))) mod p) = 1 then
      begin
        bole := true;
        for i := 0 to counter_of_choices_test - 1 do
          if j = Aray_of_choices[i] then
            bole := false;
        if bole then
        begin
          inc(counter_of_choices_test);
          SetLength(Aray_of_choices, counter_of_choices_test);
          Aray_of_choices[counter_of_choices_test - 1] := j;
        end;
      end;
    end;
  end;
end;

begin
  prime := False;
  p := 0;
  Randomize;
  while prime = False do
  begin
    prime := True;
    Writeln('Input p:');
    Readln(p);
    for i := 2 to p div 2 do
    begin
      if p mod i = 0 then
      begin
        prime := False;
        Break;
      end;
    end;
  end;

  counter := 0;
  for i := 2 to p - 1 do
  begin
    if ((p - 1) mod i) = 0 then
    begin
      inc(counter);
      setlength(Array_of_primes, counter);
      Array_of_primes[counter - 1] := i;
    end;
  end;

  Root(p, counter_of_choices, Array_of_primes, Array_of_choices);

  for i := 0 to counter_of_choices - 1 do
    write(Array_of_choices[i], ' ');

  repeat
    bol := false;
    Writeln('Input g');
    Readln(x);
    for i := 0 to counter_of_choices - 1 do
      if x = Array_of_choices[i] then
      begin
        bol := true;
      end;
  until bol = True;
  Writeln('g: ', x);
  Writeln;
  g := x;

  x := 1;
  while (x = 1) or (x >= p - 1) do
  begin
    Writeln('Input x:');
    Readln(x);
  end;

  y := Round(Exp(x * Ln(g))) mod p;
  Writeln;
  Writeln('y: ', y);

  s := 'ая';
  SetLength(Byte_Array, Length(s));
  for i := 1 to Length(s) do
    Byte_Array[i - 1] := ord(s[i]);

  for i := 1 to Length(s) do
    write(Byte_Array[i - 1], ' ');
  {a := Round(Power(g, k)) mod p;
  b := Round(Power(y,k)*m) mod p;}

  Readln;
end.

